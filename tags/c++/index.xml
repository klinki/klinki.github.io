<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on Klinki&#39;s code blog</title>
    <link>https://klinki.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on Klinki&#39;s code blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 20 Jun 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://klinki.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43; placement new operator and memory layout</title>
      <link>https://klinki.github.io/blog/placement-new/</link>
      <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://klinki.github.io/blog/placement-new/</guid>
      <description>I have discovered placement new operator when I worked on my Java Virtual Machine. It is useful when you need to dynamically create new instance of class and place it into already allocated memory. This is not so common scenario, but it is necessary if you want to write your own memory allocation system.
Here is short code example, how to use it:
#include &amp;lt;iostream&amp;gt;using namespace std; classA { int data = 0; A() { cout &amp;lt;&amp;lt; &amp;#34;Constructor called&amp;#34; &amp;lt;&amp;lt; endl; } ~A() { cout &amp;lt;&amp;lt; &amp;#34;Destructor called&amp;#34; &amp;lt;&amp;lt; endl; } } int main(int argc, const char** arv) { const int MEMORY_SIZE = 65536; // 64 kB 	char* rawMemory = new char[MEMORY_SIZE]; // allocating own memory pool  A* object = new(rawMemory) A(); // delete object; 	// CANNOT CALL delete, it would lead to memory corruption 	object-&amp;gt;~A(); // manually call destructor, if you need to get rid of object  delete[] rawMemory; // at the end, release ALL allocated memory  return 0; }  There are some circuimstances for using placement new.</description>
    </item>
    
    <item>
      <title>Memory layout</title>
      <link>https://klinki.github.io/blog/memory-layout/</link>
      <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://klinki.github.io/blog/memory-layout/</guid>
      <description>In this blog post I would like to describe memory layout and memory alignment and explain, why it is important.
Memory pages In modern computers memory is divided into chunks called pages. On most systems, page is usually around 4 KiB. When you need to allocate some memory, operating system will allocate it to you page by page. Allocated memory is usally rounded to whole pages, so allocating 5 KiB of memory would (mostly) end up allocating 2 pages, 8 KiB in total.</description>
    </item>
    
  </channel>
</rss>